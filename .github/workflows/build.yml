name: Build

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:

  createrelease:
    name: Create Release
    runs-on: [ubuntu-latest]
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Output Release URL File
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
    - name: Save Release URL File for publish
      uses: actions/upload-artifact@v1
      with:
        name: release_url
        path: release_url.txt

  build:
    name: Build packages
    needs: createrelease
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        go-version: [1.17.x]
        os: [macos-10.15, ubuntu-latest, windows-2019]
        include:
          - os: macos-10.15
            TARGET: macos
            SHELL: bash
            CMD_RESOLVE_DEPS: conda install -y -q -c conda-forge gtk3 glib
            CMD_BUILD: |
              export PKG_CONFIG_PATH="$CONDA/lib/pkgconfig"
              go mod tidy -compat="1.17"
              go build -o build/clipster_mac -ldflags "-s -w" .
            OUT_FILE_NAME: clipster_mac.zip
            ASSET_MIME: application/zip
            CMD_POST_BUILD: |
              git clone https://github.com/mc51/gtk-mac-bundler
              cd gtk-mac-bundler && make install
              cd ../ && export PKG_CONFIG_PATH="$CONDA/lib/pkgconfig"
              ~/.local/bin/gtk-mac-bundler ./build/bundle/clipster.bundle
              ls -lah && cd build && zip -r9 clipster_mac clipster_mac.app/
          - os: ubuntu-latest
            TARGET: linux
            SHELL: bash
            CMD_RESOLVE_DEPS: |
              sudo apt-get update
              sudo apt-get -y install libgtk-3-dev libappindicator3-dev
            CMD_BUILD: |
              go mod tidy -compat="1.17"
              go build -o build/clipster_linux -ldflags "-s -w" .
              cd build && zip -r9 clipster_linux clipster_linux
            OUT_FILE_NAME: clipster_linux.zip
            ASSET_MIME: application/zip  # application/octet-stream
          - os: windows-2019
            TARGET: windows
            SHELL: msys2 {0}
            CMD_BUILD: |
              mkdir -p build/clipster build/bin/ build/lib/
              mkdir -p build/share/glib-2.0/ build/share/icons/Adwaita/
              sed -i -e 's/-Wl,-luuid/-luuid/g' /mingw64/lib/pkgconfig/gdk-3.0.pc
              go mod tidy -compat="1.17"
              go build -o build/bin/clipster_win.exe -ldflags "-H=windowsgui -s -w" .
              cp /mingw64/bin/*.dll build/bin/
              cp -a /mingw64/share/icons/hicolor/ build/share/icons/
              cp /mingw64/share/icons/Adwaita/* build/share/icons/Adwaita/
              cp -a /mingw64/share/icons/Adwaita/16x16/ build/share/icons/Adwaita/
              cp -a /mingw64/share/glib-2.0/schemas/  build/share/glib-2.0/
              cp -a /mingw64/lib/gdk-pixbuf-2.0/ build/lib/
              cd build && mv * clipster/
              zip -r9 clipster_win clipster/
            OUT_FILE_NAME: clipster_win.zip
            ASSET_MIME: application/zip
    steps:
    - uses: s-weigand/setup-conda@v1
      with:
        activate-conda: false
        update-conda: true
        conda-channels: conda-forge
      if: runner.os == 'macOS'
    - name: Resolve dependencies for ${{ matrix.TARGET }}
      if: runner.os == 'Linux' || runner.os == 'macOS'
      run: ${{ matrix.CMD_RESOLVE_DEPS }}
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}
    - name: Checkout repo
      uses: actions/checkout@v2
    - name: Install and use MINGW64
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        path-type: inherit
        install: >-
          mingw-w64-x86_64-pkg-config
          mingw-w64-x86_64-gtk3
          mingw-w64-x86_64-gcc
          glib2-devel
          base-devel
          zip
      if: runner.os == 'Windows'
    - name: Build Go for ${{ matrix.TARGET }}
      run: ${{ matrix.CMD_BUILD }}
      shell: bash
      if: runner.os == 'Linux' || runner.os == 'macOS'
    - name: Build Go for ${{ matrix.TARGET }}
      run: ${{ matrix.CMD_BUILD }}
      shell: msys2 {0}
      if: runner.os == 'Windows'
    - name: Post build for ${{ matrix.TARGET }}
      run: ${{ matrix.CMD_POST_BUILD }}
      if: runner.os == 'macOS'
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release File Name & Upload URL
      id: get_release_info
      shell: bash
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./build/${{ matrix.OUT_FILE_NAME}}
        asset_name: ${{ matrix.OUT_FILE_NAME}}
        asset_content_type: ${{ matrix.ASSET_MIME}}
