name: Build

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:

  createrelease:
    name: Create Release
    runs-on: [ubuntu-latest]
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Output Release URL File
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
    - name: Save Release URL File for publish
      uses: actions/upload-artifact@v1
      with:
        name: release_url
        path: release_url.txt

  build:
    name: Build packages
    needs: createrelease
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        go-version: [1.16.x]
        os: [macos-10.15] #, ubuntu-latest, windows-latest]
        include:
          - os: macos-10.15
            TARGET: macos
            CMD_RESOLVE_DEPS: conda install -y -q -c conda-forge gtk3 glib  # brew install gtk+3
            CMD_BUILD: export PKG_CONFIG_PATH="$CONDA/lib/pkgconfig" && go build --tags gtk -o build/clipster_mac .
            OUT_FILE_NAME: clipster_mac.zip
            ASSET_MIME: application/zip
            CMD_POST_BUILD: |
              git clone https://github.com/mc51/gtk-mac-bundler && cd gtk-mac-bundler && make install
              cd ../ && export PKG_CONFIG_PATH="$CONDA/lib/pkgconfig" && ~/.local/bin/gtk-mac-bundler ./build/bundle/clipster.bundle
              ls -lah && cd build && zip -r9 clipster_mac clipster_mac.app/
          - os: ubuntu-latest
            TARGET: linux
            CMD_RESOLVE_DEPS: sudo apt-get update && sudo apt-get -y install libgtk-3-dev
            CMD_BUILD: go mod tidy && go build -o build/clipster_linux
            OUT_FILE_NAME: clipster_linux
            ASSET_MIME: application/octet-stream
          - os: windows-latest
            TARGET: windows
            CMD_BUILD: go mod tidy && go build -o build/clipster_win.exe
            OUT_FILE_NAME: clipster_win.exe
            ASSET_MIME: application/vnd.microsoft.portable-executable
    steps:
    - uses: s-weigand/setup-conda@v1
      with:
        activate-conda: false
        update-conda: true
        conda-channels: conda-forge
      if: runner.os == 'macOS'
    - name: Resolve dependencies for ${{matrix.TARGET}}
      if: runner.os == 'Linux' || runner.os == 'macOS'
      run: ${{matrix.CMD_RESOLVE_DEPS}}
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}
    - name: Checkout repo
      uses: actions/checkout@v2
    - name: Build Go for ${{matrix.TARGET}}
      run: ${{matrix.CMD_BUILD}}
    - name: Post build for ${{matrix.TARGET}}
      run: ${{matrix.CMD_POST_BUILD}}
      if: runner.os == 'macOS'
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release File Name & Upload URL
      id: get_release_info
      shell: bash
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./build/${{ matrix.OUT_FILE_NAME}}
        asset_name: ${{ matrix.OUT_FILE_NAME}}
        asset_content_type: ${{ matrix.ASSET_MIME}}
